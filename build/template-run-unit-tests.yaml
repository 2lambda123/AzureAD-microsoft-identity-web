# template-run-unit-tests.yaml
# Run all unit tests across the IdWeb project

steps:

- task: VSTest@2
  displayName: 'Run unit tests'
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: 'Tests\Microsoft.Identity.Web.Test\**\*Microsoft.Identity.Web.Test*.dll'
    searchFolder: '$(System.DefaultWorkingDirectory)'
    runInParallel: true
    codeCoverageEnabled: true
    failOnMinTestsNotRun: true
    minimumExpectedTests: '1'

- task: VSTest@2
  displayName: 'Run integration tests'
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: 'Tests\Microsoft.Identity.Web.Test.Integration\**\Microsoft.Identity.Web.Test.Integration.dll'
    searchFolder: '$(System.DefaultWorkingDirectory)'
    rerunFailedTests: true
    rerunMaxAttempts: '3'
    runInParallel: false
    codeCoverageEnabled: true
    failOnMinTestsNotRun: false
    minimumExpectedTests: '1'

- task: VSTest@2
  displayName: 'Run E2E tests'
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
        Tests\E2E Tests\WebAppUiTests\**\WebAppUiTests.dll
        Tests\E2E Tests\TokenAcquirerTests\**\TokenAcquirerTests.dll
        Tests\E2E Tests\NET 7 tests\IntegrationTests\**\IntegrationTests.dll
    searchFolder: '$(System.DefaultWorkingDirectory)'
    rerunFailedTests: true
    rerunMaxAttempts: '3'
    runInParallel: false
    codeCoverageEnabled: true
    failOnMinTestsNotRun: false
    minimumExpectedTests: '1'
  continueOnError: true
    
- task: PublishBuildArtifacts@1
  displayName: 'Publish traces after test'
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)/tests/E2E Tests/PlaywrightTraces/'
    ArtifactName: 'traces-after-tests-$(Build.BuildNumber)'
  condition: failed()

# Copy all packages out to staging
- task: CopyFiles@2
  displayName: 'Copy screenshots to staging directory'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)/tests/E2E Tests/'
    Contents: '**/*screenshotFail.png'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\screenshots'
    flattenFolders: true
  condition: failed()

- task: PublishBuildArtifacts@1
  displayName: 'Publish Screenshot after test'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\screenshots'
    ArtifactName: 'ScreenshotFail'
  condition: failed()